// Purpose:
// set up a single sweep conditional on fixation

// Parameters:
// population size: 10^6
// mutation rate: 3*(10^-9)
// recombination rate: 10^(-8)
// element size: 10kb

// Run this simulation as follows:
// slim -d gamma=<value of 2Nes here> -d replicate=<enter replicate number here> -d dominance=<dominance coefficient> single_sweeps.slim

// Simulation parameters: 
initialize()
{
	// variables (scaled down here)
	defineConstant("mu", ((3*(10^-9))*100));
	defineConstant("r", ((10^(-8))*100));
	defineConstant("Ne", (10000));
	defineConstant("s", (gamma/(2*Ne)));
	defineConstant("rep", replicate);
	defineConstant("h", dominance);

	// set the overall mutation rate
	initializeMutationRate(mu);

	// m1 mutation type (neutral and semi-dominant)
	initializeMutationType("m1", 0.5, "f", 0.0);

	// m2 mutation type (deleterious and semi-dominant)
	initializeMutationType("m2", h, "f", s);
	
	// g1 genomic element type, uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);

	// uniform chromosome of lenth 10 kb
	initializeGenomicElement(g1, 0, 10000);

	// uniform recombination along the chromosome
	initializeRecombinationRate(r);
}

// First generation
1{
	// create a population of 10^6 individuals
	sim.addSubpop("p1", Ne);

	// save run identifier
	defineConstant("simID", getSeed());
}

// Following burn-in time of 10Ne generations
100000 late()
{
	// save the state of the simulation
	sim.outputFull("/tmp/slim_" + simID + ".txt");
	
	// introduce the deleterious sweep mutation at position 5000
	target = sample(p1.genomes, 1);
	target.addNewDrawnMutation(m2, 5000);
}

// Check for fixation after every generation following burn in
100000:10000000 late() {
	if (sim.countOfMutationsOfType(m2) == 0)
	{
		fixed = (sum(sim.substitutions.mutationType == m2) == 1);
		if (fixed)
		{
			cat(simID + ": FIXED\n");
			
			// output sample info in MS format for 100 individuals
			ms = paste0(c("folder/file_prefix", gamma, "_rep_", rep, "_dom_", dominance, ".ms"));
			p1.outputMSSample(100, F, "*", ms, F);
			
			// output information for fixed mutations
			fixed = paste0(c("folder/file_prefix", gamma, "_rep_", rep, "_dom_", dominance, ".fixed"));
			sim.outputFixedMutations(fixed, append=F);
			sim.simulationFinished();
		}
		else
		{
			cat(simID + ": LOST â€“ RESTARTING\n");
			
			// go back to burn-in period
			sim.readFromPopulationFile("/tmp/slim_" + simID + ".txt");
			
			// start a newly seeded run
			setSeed(rdunif(1, 0, asInteger(2^62) - 1));
			
			// re-introduce the sweep mutation at position 5000
			target = sample(p1.genomes, 1);
			target.addNewDrawnMutation(m2, 5000);
		}
	}
}

