// Purpose:
// run recurrent sweeps model with population split and added beneficials, fitnesses rescaled following population split

// Parameters (from Arguello et al 2019 (BNZ model)):
// african Ne: 3.91 x 10^6
// european Ne: 4.73 x 10^5
// ancestral Ne: 1.95 x 10^6
// generations since split: 6.62 x 10^4
// time and size scaled down by 100
// mutation and recombination scaled up by 100

// Run with: slim -d "replicate='x'" -d "beneficial_s='small'" -d "beneficial_p='1'" arguello_beneficials_fitrescaled.slim

// Simulation parameters:
initialize()
{
	// variables
	defineConstant("mu", (4.044534*(10^(-7)))); // total mutation rate for f0, f1, f2, f3 classes (beneficials added)
	defineConstant("r", (10^(-6)));
	defineConstant("Ne", 19500); // ancestral Ne
	defineConstant("rep", replicate);
	defineConstant("ben_percent", beneficial_p); // percentage of beneficials mutations (1 = 1%, 0.1 = 0.1%)
	defineConstant("ben_effect", beneficial_s); // selection coefficient of beneficials (small = 1-10, large = 1000)

	// set the overall mutation rate
	initializeMutationRate(mu);

	// m1 mutation type (effectively neutral and semi-dominant)
	initializeMutationType("m1", 0.5, "s", "runif(1, (-1/(2*Ne)), 0);");

	// m2 mutation type (weakly deleterious and semi-dominant)
	initializeMutationType("m2", 0.5, "s", "runif(1, (-10/(2*Ne)), (-1/(2*Ne)));");
	
	// m3 mutation type (deleterious and semi-dominant)
	initializeMutationType("m3", 0.5, "s", "runif(1, (-100/(2*Ne)), (-10/(2*Ne)));");

	// m4 mutation type (effectively neutral and semi-dominant)
	initializeMutationType("m4", 0.5, "s", "runif(1, (-10000/(2*Ne)), (-100/(2*Ne)));");

	// initialize beneficial mutations
	if (ben_effect == "small")
	{
		initializeMutationType("m5", 0.5, "s", "runif(1, (1/(2*Ne)), (10/(2*Ne)));"); // small s beneficials that mirror f1 class
	}
	if (ben_effect == "large")
	{
		initializeMutationType("m5", 0.5, "f", (1000/(2*Ne))); // large s beneficials with fixed s
	}
	
	// initialize the distribution of mutation types
	if (ben_percent == 0.1)
	{
		// g1 genomic element type, uses deleterious mutations
		initializeGenomicElementType("g1", c(m1, m2, m3, m4, m5), c((0.247*0.999), (0.494*0.999), (0.039*0.999), (0.219*0.999), 0.001)); // 0.1% beneficials
	}
	if (ben_percent == 1)
	{
		// g1 genomic element type, uses deleterious mutations
		initializeGenomicElementType("g1", c(m1, m2, m3, m4, m5), c((0.247*0.990), (0.494*0.990), (0.039*0.990), (0.219*0.990), 0.010)); // 1% beneficials
	}

	// uniform chromosome of lenth 10 kb
	initializeGenomicElement(g1, 0, 10000);

	// uniform recombination along the chromosome
	initializeRecombinationRate(r);
}

// First generation
1 late()
{
	// create a population of 19500 individuals
	sim.addSubpop("p1", Ne);
}

// Run simulation for a burn in period of 10Ne generations
195000 early()
{
	// split off two subpopulations (African and European) from source population
	sim.addSubpopSplit("p2", 39100, p1); // African Ne
	sim.addSubpopSplit("p3", 4730, p1); // European Ne
}

// Rescale fitnesses of African population
fitness(m1, p2) { return (1 + runif(1, (-1/(2*39100)), 0)); } 
fitness(m2, p2) { return (1 + runif(1, (-10/(2*39100)), (-1/(2*39100)))); } 
fitness(m3, p2) { return (1 + runif(1, (-100/(2*39100)), (-10/(2*39100)))); } 
fitness(m4, p2) { return (1 + runif(1, (-10000/(2*39100)), (-100/(2*39100)))); }
fitness(m5, p2) 
{
	if (ben_effect == "small")
	{
		return (1 + runif(1, (1/(2*39100)), (10/(2*39100))));
	}
	if (ben_effect == "large")
	{
		return (1 + (1000/(2*39100)));
	}
} 

// Rescale fitnesses of European population
fitness(m1, p3) { return (1 + runif(1, (-1/(2*4730)), 0)); } 
fitness(m2, p3) { return (1 + runif(1, (-10/(2*4730)), (-1/(2*4730)))); } 
fitness(m3, p3) { return (1 + runif(1, (-100/(2*4730)), (-10/(2*4730)))); } 
fitness(m4, p3) { return (1 + runif(1, (-10000/(2*4730)), (-100/(2*4730)))); }
fitness(m5, p3) 
{
	if (ben_effect == "small")
	{
		return (1 + runif(1, (1/(2*4730)), (10/(2*4730))));
	}
	if (ben_effect == "large")
	{
		return (1 + (1000/(2*4730)));
	}
}  

// Reduce the ancestral population size to 0 after subpopulations have been populated
195000 late()
{
	// remove the source subpopulation
	p1.setSubpopulationSize(0); 
}

// Run simulation for an additional 662 generations to model split time
195662 late()
{
	// sampling the genomes
	afr = sample(p2.genomes, 100, F);
	eur = sample(p3.genomes, 100, F);

	// vector of all sampled genomes
	genomes = c(afr, eur);

	// list of segregating sites sorted by position
	muts = sortBy(unique(genomes.mutations), "position");

	// create an MS file to write to
	ms = paste0(c("folder/file_prefix", rep, ben_effect, ben_percent, "_fitrescaled.ms"));
	writeFile(ms, "", append = F);

	// formatting the header
	writeFile(ms, paste0(c("\\\\", "\n", "segsites: ", size(muts))), append = T);
	
	// create a list of positions of the seg sites
	positions = format("%.6f", muts.position / sim.chromosome.lastPosition);
	writeFile(ms, paste0(c("positions: ", paste(positions, " "))), append = T);

	// printing the sample genotypes
	for (genome in afr)
	{
		hasMuts = (match(muts, genome.mutations) >= 0);
		writeFile(ms, paste0(paste(asInteger(hasMuts), "")), append = T);
	}
	for (genome in eur)
	{
		hasMuts = (match(muts, genome.mutations) >= 0);
		writeFile(ms, paste0(paste(asInteger(hasMuts), "")), append = T);
	}

	// output full information from simulation
	full = paste0(c("folder/file_prefix", rep, ben_effect, ben_percent, "_fitrescaled.full"));
	genomes.output(full, append=F);
	sim.simulationFinished();
}
